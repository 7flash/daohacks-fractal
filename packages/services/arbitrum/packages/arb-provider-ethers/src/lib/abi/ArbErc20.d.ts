/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers'
import { Listener, Provider } from 'ethers/providers'
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils'
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.'

interface ArbErc20Interface extends Interface {
  functions: {
    adminMint: TypedFunctionDescription<{
      encode([account, amount]: [string, BigNumberish]): string
    }>

    allowance: TypedFunctionDescription<{
      encode([owner, spender]: [string, string]): string
    }>

    approve: TypedFunctionDescription<{
      encode([spender, amount]: [string, BigNumberish]): string
    }>

    balanceOf: TypedFunctionDescription<{
      encode([account]: [string]): string
    }>

    decreaseAllowance: TypedFunctionDescription<{
      encode([spender, subtractedValue]: [string, BigNumberish]): string
    }>

    increaseAllowance: TypedFunctionDescription<{
      encode([spender, addedValue]: [string, BigNumberish]): string
    }>

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>

    transfer: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string
    }>

    transferFrom: TypedFunctionDescription<{
      encode([sender, recipient, amount]: [
        string,
        string,
        BigNumberish
      ]): string
    }>

    withdraw: TypedFunctionDescription<{
      encode([account, amount]: [string, BigNumberish]): string
    }>
  }

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[]
    }>

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[]
    }>
  }
}

export class ArbErc20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ArbErc20
  attach(addressOrName: string): ArbErc20
  deployed(): Promise<ArbErc20>

  on(event: EventFilter | string, listener: Listener): ArbErc20
  once(event: EventFilter | string, listener: Listener): ArbErc20
  addListener(eventName: EventFilter | string, listener: Listener): ArbErc20
  removeAllListeners(eventName: EventFilter | string): ArbErc20
  removeListener(eventName: any, listener: Listener): ArbErc20

  interface: ArbErc20Interface

  functions: {
    adminMint(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'adminMint(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    balanceOf(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: TransactionOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    withdraw(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    'withdraw(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>
  }

  adminMint(
    account: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'adminMint(address,uint256)'(
    account: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  allowance(
    owner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  balanceOf(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: TransactionOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  withdraw(
    account: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  'withdraw(address,uint256)'(
    account: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter
  }

  estimate: {
    adminMint(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'adminMint(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    balanceOf(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: TransactionOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    withdraw(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>

    'withdraw(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>
  }
}

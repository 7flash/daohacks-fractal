//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//


use accounts::AccountStore;
use accounts::accountStore_init;
use accounts::getGlobalAccountStore;
use accounts::setGlobalAccountStore;
use accounts::accountStore_createAccountFromEvmCode;
use arbstatistics::arbStatistics_init;
use accounts::accountStore_upgradeContractFromEvmCode;
use arbstatistics::arbStatistics_init;
use blockhash::blockhash_init;
use chainParameters::chainParams_init;
use chainParameters::chainParams_haveDoneInit;
use codeSegment::codeSegment_init;
use codeSegment::translateEvmCodeSegment;
use contractTemplates::getArbInfoCode;
use contractTemplates::getArbInfoAddress;
use contractTemplates::getArbInfoStorage;
use decompression::decompression_init;
use errorHandler::errorHandler_init;
use evmCallStack::evmCallStack_init;
use evmOps::evmOps_init;
use evmlogs::EvmLogs;
use gasAccounting::GasUsage;
use gasAccounting::gasAccounting_init;
use inbox::inbox_init;
use inbox::inbox_get;
use messages::TxRequestData;
use output::output_init;
use output::txReceipts_init;
use pluggables::pluggables_init;
use precompiles::precompiles_init;
use rollupTracker::rollupTracker_init;

use std::bytearray::MarshalledBytes;
use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_unmarshalBytes;
use std::bytestream::ByteStream;
use std::bytestream::bytestream_new;
use std::storageMap::StorageMap;

use decompression::decompression_init;
use gasAccounting::getNextRequestFromCongestionAuction;
use gasAccounting::txFeeStats_zero;
use messages::handleL1Request; // return None if message format error; Some(()) if other error; if no error, never return
use messages::handleL2Request; // return None if message format error; Some(()) if other error; if no error, never return
use output::emitTxReceipt;
use arbsys::arbsys_txcall;
use inbox::IncomingRequest;
use evmCallStack::evmCallStack_makeEmpty;

use bridge_arbos_versions::GlobalsBeforeUpgrade;
use bridge_arbos_versions::remapGlobalsForUpgrade;


impure func main(oldGlobals: GlobalsBeforeUpgrade) {
    if (unsafecast<any>(oldGlobals) != ()) {
        // this is an upgrade; we're inheriting the state of a previous ArbOS instance

        asm(remapGlobalsForUpgrade(oldGlobals),) { rset };

        // now re-do the initializations that set up pointers into the ArbOS code
        errorHandler_init();
        evmOps_init();
        evmCallStack_makeEmpty();   // clear out the old EVM call stack from before the upgrade
        if (initializePreinstalls(true) == None<()>) {
            panic;   // don't try to run without preinstalls and precompiles
        }
    } else {
        // this is a clean start, not an upgrade
        errorHandler_init();
        arbStatistics_init();

        pluggables_init();
        codeSegment_init();
        chainParams_init();
        output_init();
        decompression_init();
        inbox_init();
        gasAccounting_init();
        evmCallStack_init();
        evmOps_init();
        blockhash_init();
        inbox_init();
        accountStore_init();
        txReceipts_init();
        rollupTracker_init();
        if (initializePreinstalls(false) == None<()>) {
            panic;   // don't try to run without preinstalls and precompiles
        }
    }

    // initialize any customizations here

    mainRunLoop();
}

public impure func mainRunLoop() {
    loop {
        let (resultCode, maybeL1, maybeL2) = getNextRequestFromCongestionAuction();
        if let Some(msg) = maybeL1 {
            if (resultCode == const::TxResultCode_success) {
                if(handleL1Request(msg) == None<()>) {
                    // reject for message format error
                    emitTxReceipt(
                        msg,
                        const::TxResultCode_formatError,
                        None<ByteArray>,
                        None<EvmLogs>,
                        None<GasUsage>,
                        txFeeStats_zero(),
                    );
                }
            } else {
                // reject for error
                emitTxReceipt(msg, resultCode, None<ByteArray>, None<EvmLogs>, None<GasUsage>, txFeeStats_zero());
            }
        } else {
            if let Some(request) = maybeL2 {
                if (resultCode == const::TxResultCode_success) {
                    if (handleL2Request(
                        bytestream_new(request.incomingRequest.msgData),
                        request
                    ) == None<()>) {
                        // reject for message format error
                        emitTxReceipt(
                            request.incomingRequest,
                            const::TxResultCode_formatError,
                            None<ByteArray>,
                            None<EvmLogs>,
                            None<GasUsage>,
                            request.feeStats,
                        );
                    }
                } else {
                    // reject for error
                    emitTxReceipt(
                        request.incomingRequest,
                        resultCode,
                        None<ByteArray>,
                        None<EvmLogs>,
                        None<GasUsage>,
                        request.feeStats,
                    );
                }
            } // else request was not identified as either L1 or L2, which should be impossible
        }
        // if we reach here, message has already been handled and log already sent
    }
}

impure func initializePreinstalls(isUpgrade: bool) -> option<()> {
    let acctStore = getGlobalAccountStore();

    let code = bytearray_unmarshalBytes(getArbInfoCode())?;
    let (initCodePt, evmJumpTable, _) = translateEvmCodeSegment(
        bytestream_new(code),
        false
    )?;
    acctStore = xif (isUpgrade) {
        accountStore_upgradeContractFromEvmCode(
            acctStore,
            getArbInfoAddress(),
            code,
            evmJumpTable,
            initCodePt,
        )
    } else {
        accountStore_createAccountFromEvmCode(
            acctStore,
            getArbInfoAddress(),
            code,
            evmJumpTable,
            initCodePt,
            getArbInfoStorage()
        )?
    };

    // set up precompiled contracts
    acctStore = precompiles_init(acctStore, isUpgrade)?;

    setGlobalAccountStore(acctStore);

    return Some(());
}

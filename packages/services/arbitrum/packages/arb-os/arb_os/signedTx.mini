//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::bytearray::ByteArray;
use std::bytestream::ByteStream;
use std::bytearray::MarshalledBytes;

use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_getByte;
use std::bytearray::bytearray_get256;
use std::bytearray::bytearray_setByte;
use std::bytearray::bytearray_set256;
use std::bytearray::bytearray_extract;
use std::bytearray::marshalledBytes_hash;
use std::bytearray::bytearray_copy;

use std::bytestream::bytestream_new;
use std::bytestream::bytestream_skipBytes;

use std::rlp::rlp_encodeAndHashMessageInfoForSignature;
use std::rlp::rlp_decodeMessageInfo;

use chainParameters::chainParams_chainId;

use std::keccak::keccak256;

use inbox::IncomingRequest;

use gasAccounting::txFeeStats_zero;

use messages::TxRequestData;

use std::rlp::SignedTx;


public impure func recoverSigner(tx: SignedTx) -> option<address> {
    let rlpHashForSig = bytes32(0);
    if ( (tx.v == 27) || (tx.v == 28) ) {
        rlpHashForSig = rlp_encodeAndHashMessageInfoForSignature(tx, None<uint>);  // non-EIP155 signature
    } else {
        rlpHashForSig = rlp_encodeAndHashMessageInfoForSignature(tx, Some(chainParams_chainId()));  // EIP155 signature
    }
    let signer = asm(
        tx.r,
        tx.s,
        1 - (tx.v % 2),
        rlpHashForSig,
    ) address { ecrecover };

    return xif (signer == address(0)) {
        None<address>
    } else {
        Some(signer)
    };
}
